import telebot
from flask import Flask, render_template, request, redirect, session, flash
import threading
import sqlite3
import hashlib
import uuid
import schedule
import time
from datetime import datetime, timedelta
import pytz

def format_ukrainian_time(utc_timestamp):
    try:
        from datetime import datetime
        import pytz
        
        # –ü–∞—Ä—Å–∏–º UTC –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã
        utc_time = datetime.strptime(utc_timestamp, '%Y-%m-%d %H:%M:%S')
        utc_time = pytz.utc.localize(utc_time)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
        ukraine_tz = pytz.timezone('Europe/Kiev')
        ukraine_time = utc_time.astimezone(ukraine_tz)
        
        return ukraine_time.strftime('%d.%m.%Y %H:%M')
    except:
        return utc_timestamp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = telebot.TeleBot('8064604462:AAHG4VH59Fy7KUPN6eogD_MJ-XvxQdug1Cg')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def hash_password(password):
    return hashlib.md5(password.encode()).hexdigest()

def add_user(username, password, chat_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO users (username, password, chat_id) VALUES (?, ?, ?)', 
                      (username, hash_password(password), chat_id))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def check_user(username, password):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', 
                  (username, hash_password(password)))
    user = cursor.fetchone()
    conn.close()
    return user is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ñ–µ!')

@bot.message_handler(commands=['get_chat_id'])
def get_chat_id(message):
    chat_type = "–ª–∏—á–Ω—ã–π —á–∞—Ç" if message.chat.type == 'private' else "–≥—Ä—É–ø–ø–∞"
    bot.send_message(message.chat.id, f'ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{message.chat.id}`\n–¢–∏–ø: {chat_type}', parse_mode='Markdown')

@bot.message_handler(commands=['setup'])
def setup_chat(message):
    chat_id = message.chat.id
    chat_type = message.chat.type
    
    if chat_type in ['group', 'supergroup']:
        bot.send_message(chat_id, 
                        f'üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã*\n\n'
                        f'ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{chat_id}`\n\n'
                        f'üìã *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*\n'
                        f'1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: `{chat_id}`\n'
                        f'2. –í–æ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n'
                        f'3. –í—Å—Ç–∞–≤—å—Ç–µ ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n'
                        f'4. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏!\n\n'
                        f'‚úÖ –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É', 
                        parse_mode='Markdown')
    else:
        bot.send_message(chat_id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!')

# –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ-–∑–∞–ø—Ä–æ—Å–æ–≤
pending_photo_requests = []

@bot.callback_query_handler(func=lambda call: call.data.startswith('done_'))
def handle_task_completion(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (—Ñ–æ—Ä–º–∞—Ç: done_task_id_username_require_photo)
    data_parts = call.data.split('_')
    task_id = data_parts[1]
    username = data_parts[2]
    require_photo = int(data_parts[3]) if len(data_parts) > 3 else 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç—á—ë—Ç
    completed_by = call.from_user.username or call.from_user.first_name
    task_text = call.message.text.replace('üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ', '').replace(' (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)', '').replace(' üì∏', '')
    
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO task_completions (task_id, username, task_text, completed_by) VALUES (?, ?, ?, ?)', 
                  (task_id, username, task_text, completed_by))
    conn.commit()

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    cursor.execute('SELECT repeat_daily, repeat_weekly FROM tasks WHERE id = ?', (task_id,))
    task_info = cursor.fetchone()
    if task_info and task_info[0] == 0 and task_info[1] == 0:  # –ï—Å–ª–∏ —Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        cursor.execute('UPDATE tasks SET is_active = 0 WHERE id = ?', (task_id,))
    conn.commit()

    conn.close()
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if require_photo:
        bot.answer_callback_query(call.id, f'‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞! –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –∑–∞–ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ-–æ—Ç—á—ë—Ç')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        from datetime import datetime, timedelta
        import pytz
        
        ukraine_tz = pytz.timezone('Europe/Kiev')
        photo_time = datetime.now(ukraine_tz) + timedelta(minutes=5)
        
        pending_photo_requests.append({
            'time': photo_time.strftime('%H:%M'),
            'chat_id': call.message.chat.id,
            'task_text': task_text,
            'completed_by': completed_by,
            'date': photo_time.strftime('%Y-%m-%d')
        })
        
        print(f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ñ–æ—Ç–æ-–∑–∞–ø—Ä–æ—Å –Ω–∞ {photo_time.strftime("%H:%M")} –¥–ª—è –∑–∞–¥–∞—á–∏: {task_text}')
    else:
        bot.answer_callback_query(call.id, f'‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    photo_icon = ' üì∏' if require_photo else ''
    bot.edit_message_text(
        text=call.message.text + f'\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: @{completed_by}{photo_icon}',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('escalation_'))
def handle_escalation_response(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback (escalation_yes_task_id_username)
    data_parts = call.data.split('_')
    task_id = data_parts[2]
    username = data_parts[3]
    
    completed_by = call.from_user.username or call.from_user.first_name
    task_text = call.message.text.split('–ó–∞–¥–∞—á–∞: ')[1].split('\n')[0]
    
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO task_completions (task_id, username, task_text, completed_by) VALUES (?, ?, ?, ?)', 
                  (task_id, username, task_text, completed_by))
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    cursor.execute('SELECT repeat_daily, repeat_weekly FROM tasks WHERE id = ?', (task_id,))
    task_info = cursor.fetchone()
    if task_info and task_info[0] == 0 and task_info[1] == 0:  # –ï—Å–ª–∏ —Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        cursor.execute('UPDATE tasks SET is_active = 0 WHERE id = ?', (task_id,))
    conn.commit()    
    conn.close()
    
    bot.answer_callback_query(call.id, f'‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!')
    bot.edit_message_text(
        text=call.message.text + f'\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: @{completed_by}',
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

# –í–µ–±-–º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    if 'username' in session:
        active_tasks, completed_tasks = get_user_tasks(session['username'])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        formatted_active = []
        for task in active_tasks:
            task_list = list(task)
            task_list[3] = format_ukrainian_time(task[3])
            formatted_active.append(tuple(task_list))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        formatted_completed = []
        for task in completed_tasks:
            task_list = list(task)
            task_list[3] = format_ukrainian_time(task[3])
            formatted_completed.append(tuple(task_list))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT nickname FROM used_usernames WHERE username = ? ORDER BY created_at DESC', (session['username'],))
        used_usernames = [row[0] for row in cursor.fetchall()]
        conn.close()
        
        return render_template('dashboard.html', 
                             username=session['username'], 
                             active_tasks=formatted_active,
                             completed_tasks=formatted_completed,
                             used_usernames=used_usernames)
    return render_template('login.html')

def get_chat_id_by_username(username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM users WHERE username = ?', (username,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def get_chat_info(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–≥—Ä—É–ø–ø–µ"""
    if not chat_id:
        return None
    
    try:
        chat = bot.get_chat(chat_id)
        return {
            'id': chat_id,
            'title': chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç',
            'type': chat.type
        }
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}')
        return None

def get_chat_members(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
    if not chat_id:
        return []
    
    try:
        members = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        chat_member_count = bot.get_chat_member_count(chat_id)
        
        # –î–ª—è –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø (–¥–æ 200 —á–µ–ª–æ–≤–µ–∫) –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö
        if chat_member_count <= 200:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                admins = bot.get_chat_administrators(chat_id)
                for admin in admins:
                    user = admin.user
                    username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                    members.append({
                        'id': user.id,
                        'name': user.first_name + (f" {user.last_name}" if user.last_name else ""),
                        'username': username,
                        'status': admin.status,
                        'is_admin': True
                    })
            except:
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤
        if not members:
            admins = bot.get_chat_administrators(chat_id)
            for admin in admins:
                user = admin.user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                members.append({
                    'id': user.id,
                    'name': user.first_name + (f" {user.last_name}" if user.last_name else ""),
                    'username': username,
                    'status': admin.status,
                    'is_admin': True
                })
        
        return members
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}')
        return []

def send_task_notification(task_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    print(f'DEBUG: send_task_notification received: {task_data}, length: {len(task_data)}')
    
    task_id = task_data[0]
    username = task_data[1] 
    task_text = task_data[2]
    repeat_daily = task_data[3]
    require_photo = task_data[4]
    repeat_weekly = task_data[5]
    week_day = task_data[6]
    assigned_to = task_data[7] if len(task_data) > 7 else None
    
    print(f'DEBUG: assigned_to in function = "{assigned_to}"')
    
    chat_id = get_chat_id_by_username(username)
    
    if chat_id:
        try:
            repeat_text = ""
            if repeat_daily:
                repeat_text = " (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"
            elif repeat_weekly:
                days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
                repeat_text = f" (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ {days[week_day]})"
            
            photo_text = " üì∏" if require_photo else ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
            if assigned_to:
                if assigned_to.startswith('@'):
                    message_text = f'üîî –ó–∞–¥–∞—á–∞ –¥–ª—è {assigned_to}: {task_text}{repeat_text}{photo_text}'
                else:
                    message_text = f'üîî –ó–∞–¥–∞—á–∞ –¥–ª—è @{assigned_to}: {task_text}{repeat_text}{photo_text}'
            else:
                message_text = f'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}{repeat_text}{photo_text}'
            
            markup = telebot.types.InlineKeyboardMarkup()
            btn = telebot.types.InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', 
                                                   callback_data=f'done_{task_id}_{username}_{require_photo}')
            markup.add(btn)
            
            bot.send_message(chat_id, message_text, reply_markup=markup)
            print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message_text}')
            
            return True
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')
            return False
    
    return False        

def check_and_send_notifications():
    global pending_photo_requests
    
    # –£–∫—Ä–∞–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è (–ö–∏–µ–≤)
    ukraine_tz = pytz.timezone('Europe/Kiev')
    now = datetime.now(ukraine_tz)
    current_time = now.strftime('%H:%M')
    current_date = now.strftime('%Y-%m-%d')
    current_weekday = now.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    
    print(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è: {current_time} (–ö–∏–µ–≤), –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_weekday}')

    print(f'–ò—â–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—Ä–µ–º—è: {current_time}')
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    cursor.execute('SELECT id, username, task_time, task_text, is_active, repeat_daily, repeat_weekly, week_day, require_photo, assigned_to FROM tasks WHERE is_active = 1')
    all_active = cursor.fetchall()
    print(f'–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {all_active}')
    
    cursor.execute('''
        SELECT id, username, task_text, repeat_daily, require_photo, repeat_weekly, week_day, assigned_to FROM tasks 
        WHERE task_time = ? AND is_active = 1 
        AND (
            (repeat_daily = 0 AND repeat_weekly = 0) OR
            (repeat_daily = 1 AND id NOT IN (
                SELECT DISTINCT task_id FROM task_completions 
                WHERE DATE(completed_at) = ? AND task_id IS NOT NULL
            )) OR
            (repeat_weekly = 1 AND week_day = ? AND id NOT IN (
                SELECT DISTINCT task_id FROM task_completions 
                WHERE DATE(completed_at) = ? AND task_id IS NOT NULL
            ))
        )
    ''', (current_time, current_date, current_weekday, current_date))
    tasks_to_send = cursor.fetchall()

    print(f'–ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {tasks_to_send}')
    print(f'DEBUG: SQL columns returned: {[desc[0] for desc in cursor.description]}')
    for i, task in enumerate(tasks_to_send):
        print(f'DEBUG: Task {i}: {task}, length: {len(task)}')
    
    for task_data in tasks_to_send:
        print(f'DEBUG: Processing task_data: {task_data}')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if send_task_notification(task_data):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
            task_id = task_data[0]
            username = task_data[1]
            task_text = task_data[2]
            repeat_daily = task_data[3]
            repeat_weekly = task_data[5]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            ukraine_tz = pytz.timezone('Europe/Kiev')
            current_ukraine_time = datetime.now(ukraine_tz).strftime('%Y-%m-%d %H:%M:%S')

            cursor.execute('INSERT INTO sent_tasks (task_id, username, task_text, sent_at) VALUES (?, ?, ?, ?)', 
                (task_id, username, task_text, current_ukraine_time))
            conn.commit()
            print(f'DEBUG: –ó–∞–ø–∏—Å–∞–ª–∏ –≤ sent_tasks: task_id={task_id}, username={username}, text={task_text}')

    conn.close()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ-–∑–∞–ø—Ä–æ—Å—ã
    for i, photo_request in enumerate(pending_photo_requests[:]):
        if photo_request['time'] == current_time and photo_request['date'] == current_date:
            try:
                bot.send_message(photo_request['chat_id'], 
                               f'üì∏ –í—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ç–æ-–æ—Ç—á—ë—Ç–∞!\n\n'
                               f'–ó–∞–¥–∞—á–∞: {photo_request["task_text"]}\n'
                               f'–í—ã–ø–æ–ª–Ω–∏–ª: @{photo_request["completed_by"]}\n\n'
                               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.')
                print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {photo_request["task_text"]}')
                pending_photo_requests.remove(photo_request)
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ: {e}')

    # –≠—Å–∫–∞–ª–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    escalation_time_threshold = datetime.now(ukraine_tz) - timedelta(minutes=15)
    print(f'DEBUG: –ò—â–µ–º –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ: {escalation_time_threshold.strftime("%H:%M:%S")}')
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    escalation_conn = sqlite3.connect('bot_database.db')
    escalation_cursor = escalation_conn.cursor()
    
    escalation_cursor.execute('SELECT * FROM sent_tasks WHERE escalation_sent = 0')
    all_sent = escalation_cursor.fetchall()
    print(f'DEBUG: –í—Å–µ –Ω–µ—ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ sent_tasks: {all_sent}')

    escalation_cursor.execute('''
        SELECT st.id, st.task_id, st.username, st.task_text, st.sent_at 
        FROM sent_tasks st
        WHERE datetime(st.sent_at) <= datetime(?)
        AND st.escalation_sent = 0
        AND st.task_id NOT IN (
            SELECT DISTINCT task_id FROM task_completions 
            WHERE task_id = st.task_id AND DATE(completed_at) = ?
        )
    ''', (escalation_time_threshold.strftime('%Y-%m-%d %H:%M:%S'), current_date))
    
    overdue_tasks = escalation_cursor.fetchall()

    print(f'DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é, –∏—â–µ–º –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ: {escalation_time_threshold.strftime("%H:%M:%S")}')
    print(f'DEBUG: –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(overdue_tasks)}')
    
    for overdue in overdue_tasks:
        sent_task_id, task_id, username, task_text, sent_at = overdue
        chat_id = get_chat_id_by_username(username)
        if chat_id:
            try:
                markup = telebot.types.InlineKeyboardMarkup()
                btn_yes = telebot.types.InlineKeyboardButton('‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏–ª', 
                                                           callback_data=f'escalation_yes_{task_id}_{username}')
                markup.add(btn_yes)
                
                bot.send_message(chat_id, 
                               f'‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                               f'–ó–∞–¥–∞—á–∞: {task_text}\n'
                               f'–í—Ä–µ–º—è: {sent_at}\n\n'
                               f'–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?', 
                               reply_markup=markup)
                
                # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —ç—Å–∫–∞–ª–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                escalation_cursor.execute('UPDATE sent_tasks SET escalation_sent = 1 WHERE id = ?', (sent_task_id,))
                escalation_conn.commit()
                
                print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç—Å–∫–∞–ª–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task_text}')
                
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}')
    
    escalation_conn.close()

@app.route('/register_page')
def register_page():
    return render_template('register.html')

@app.route('/register', methods=['POST'])
def register():
    username = request.form['username']
    password = request.form['password']
    
    if add_user(username, password, ''):  # –ü—É—Å—Ç–æ–π chat_id
        return '<h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1><p>–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ID —á–∞—Ç–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p><a href="/">–í–æ–π—Ç–∏</a>'
    else:
        return '<h1>–û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</h1><a href="/register_page">–ù–∞–∑–∞–¥</a>'

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    
    if check_user(username, password):
        session['username'] = username
        return redirect('/')
    else:
        return '<h1>–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å</h1><a href="/">–ù–∞–∑–∞–¥</a>'

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

def save_task(username, task_time, task_text, repeat_daily=0, repeat_weekly=0, week_day=0, require_photo=0, assigned_to=None):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    cursor.execute('INSERT INTO tasks (username, task_time, task_text, assigned_to, repeat_daily, repeat_weekly, week_day, require_photo) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', 
                  (username, task_time, task_text, assigned_to, repeat_daily, repeat_weekly, week_day, require_photo))
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤
    if assigned_to:
        try:
            cursor.execute('INSERT OR IGNORE INTO used_usernames (username, nickname) VALUES (?, ?)', 
                          (username, assigned_to))
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –µ—Å—Ç—å
    
    conn.commit()
    conn.close()

def get_user_tasks(username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    cursor.execute('SELECT id, task_time, task_text, created_at, repeat_daily, require_photo, repeat_weekly, week_day, assigned_to FROM tasks WHERE username = ? AND is_active = 1 ORDER BY task_time', 
                  (username,))
    active_tasks = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    cursor.execute('SELECT id, task_time, task_text, created_at, repeat_daily, require_photo, repeat_weekly, week_day, assigned_to FROM tasks WHERE username = ? AND is_active = 0 AND repeat_daily = 0 AND repeat_weekly = 0 ORDER BY task_time', 
                  (username,))
    completed_tasks = cursor.fetchall()
    
    conn.close()
    return active_tasks, completed_tasks

def get_user_reports(username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT task_text, completed_by, completed_at 
        FROM task_completions 
        WHERE username = ? 
        ORDER BY completed_at DESC
    ''', (username,))
    reports = cursor.fetchall()
    conn.close()
    return reports

def get_user_reports(username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT task_text, completed_by, completed_at 
        FROM task_completions 
        WHERE username = ? 
        ORDER BY completed_at DESC
    ''', (username,))
    reports = cursor.fetchall()
    conn.close()
    return reports

@app.route('/delete_task/<int:task_id>')
def delete_task(task_id):
    if 'username' not in session:
        return redirect('/')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT username FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()
    
    if task and task[0] == session['username']:
        cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
        conn.commit()
        conn.close()
        return redirect('/')
    else:
        conn.close()
        return '<h1>–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1><a href="/">–ù–∞–∑–∞–¥</a>'

@app.route('/edit_task/<int:task_id>')
def edit_task(task_id):
    if 'username' not in session:
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, task_time, task_text, username, repeat_daily, require_photo, repeat_weekly, week_day, assigned_to FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    cursor.execute('SELECT DISTINCT nickname FROM used_usernames WHERE username = ? ORDER BY created_at DESC', (session['username'],))
    used_usernames = [row[0] for row in cursor.fetchall()]
    
    conn.close()
    
    if task and task[3] == session['username']:
        return render_template('edit_task.html', task=task, used_usernames=used_usernames)
    else:
        return '<h1>–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1><a href="/">–ù–∞–∑–∞–¥</a>'

@app.route('/update_task/<int:task_id>', methods=['POST'])
def update_task(task_id):
    if 'username' not in session:
        return redirect('/')
    
    task_time = request.form['task_time']
    task_text = request.form['task_text']
    repeat_type = request.form['repeat_type']
    week_day = int(request.form.get('week_day', 0))
    require_photo = 1 if 'require_photo' in request.form else 0
    assigned_to = request.form.get('assigned_to', '').strip() or None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    repeat_daily = 1 if repeat_type == 'daily' else 0
    repeat_weekly = 1 if repeat_type == 'weekly' else 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET task_time = ?, task_text = ?, repeat_daily = ?, repeat_weekly = ?, week_day = ?, require_photo = ?, assigned_to = ? WHERE id = ? AND username = ?', 
                  (task_time, task_text, repeat_daily, repeat_weekly, week_day, require_photo, assigned_to, task_id, session['username']))
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤
    if assigned_to:
        try:
            cursor.execute('INSERT OR IGNORE INTO used_usernames (username, nickname) VALUES (?, ?)', 
                          (session['username'], assigned_to))
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –µ—Å—Ç—å
    
    conn.commit()
    conn.close()
    
    return redirect('/')

@app.route('/restart_task/<int:task_id>')
def restart_task(task_id):
    if 'username' not in session:
        return redirect('/')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT username, is_active, repeat_daily FROM tasks WHERE id = ?', (task_id,))
    task = cursor.fetchone()
    
    if task and task[0] == session['username'] and task[1] == 0 and task[2] == 0:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞—Ç–Ω–æ
        cursor.execute('UPDATE tasks SET is_active = 1 WHERE id = ?', (task_id,))
        conn.commit()
        conn.close()
        return redirect('/')
    else:
        conn.close()
        return '<h1>–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á—É –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</h1><a href="/">–ù–∞–∑–∞–¥</a>'

@app.route('/add_task', methods=['POST'])
def add_task():
    if 'username' not in session:
        return redirect('/')
    
    task_time = request.form['task_time']
    task_text = request.form['task_text']
    repeat_type = request.form['repeat_type']
    week_day = int(request.form.get('week_day', 0))
    require_photo = 1 if 'require_photo' in request.form else 0
    assigned_to = request.form.get('assigned_to', '').strip() or None
    username = session['username']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    repeat_daily = 1 if repeat_type == 'daily' else 0
    repeat_weekly = 1 if repeat_type == 'weekly' else 0
    
    save_task(username, task_time, task_text, repeat_daily, repeat_weekly, week_day, require_photo, assigned_to)
    return redirect('/')

@app.route('/update_chat_id', methods=['POST'])
def update_chat_id():
    if 'username' not in session:
        return redirect('/')
    
    new_chat_id = request.form['chat_id']
    username = session['username']
    
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET chat_id = ? WHERE username = ?', (new_chat_id, username))
    conn.commit()
    conn.close()
    
    return '<h1>ID —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!</h1><a href="/">–ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç</a>'

@app.route('/reports')
def reports():
    if 'username' not in session:
        return redirect('/')
    
    reports = get_user_reports(session['username'])
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    formatted_reports = []
    for report in reports:
        report_list = list(report)
        report_list[2] = format_ukrainian_time(report[2])  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        formatted_reports.append(tuple(report_list))
    
    return render_template('reports.html', username=session['username'], reports=formatted_reports)

@app.route('/settings')
def settings():
    if 'username' not in session:
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM users WHERE username = ?', (session['username'],))
    result = cursor.fetchone()
    conn.close()
    
    current_chat_id = result[0] if result and result[0] else None
    current_chat_info = None
    chat_members = []
    
    # –ï—Å–ª–∏ chat_id –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    if current_chat_id:
        current_chat_info = get_chat_info(current_chat_id)
        chat_members = get_chat_members(current_chat_id)
    
    return render_template('settings.html', 
                         username=session['username'], 
                         current_chat_id=current_chat_id,
                         current_chat_info=current_chat_info,
                         chat_members=chat_members)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    schedule.every().minute.do(check_and_send_notifications)
    
    def schedule_checker():
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=schedule_checker, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling()

if __name__ == '__main__':
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    
    import os
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=8000, debug=False)